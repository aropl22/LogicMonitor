Repository Structure
This repository is organized into two main folders based on script type:

bash
Copy
Edit
.
‚îú‚îÄ‚îÄ ps/      # PowerShell scripts
‚îú‚îÄ‚îÄ py/      # Python scripts
‚îú‚îÄ‚îÄ README.md
‚îî‚îÄ‚îÄ sdt_params.json  # Example configuration file
üîπ ps/ ‚Äì PowerShell Scripts
Contains PowerShell scripts used for interacting with the LogicMonitor API, including scheduling downtime (SDT). These scripts rely on the Logic.Monitor module and may use a JSON file for parameters.

Example: build-sdt.ps1

üîπ py/ ‚Äì Python Scripts
Includes optional helper scripts written in Python for tasks such as data manipulation, file preparation, or integration with other tools.

Example: prepare-devices.py

Organizing scripts this way keeps language-specific logic cleanly separated and easier to maintain.
Let me know if you'd like to include example content from each folder.


Getting Started
‚úÖ Prerequisites
To use the PowerShell script in this repository, you'll need:

Windows system

Python (optional, if you're using supporting Python scripts)

PowerShell 5.1+ or PowerShell Core 7+

Internet connection (to install dependencies)

üêç Installing Python on Windows
If you're running any supporting Python scripts (optional), follow these steps:

Download Python from the official website:
https://www.python.org/downloads/windows/

Run the installer. Be sure to check the box that says:
‚úÖ Add Python to PATH

Once installed, verify it by opening PowerShell and running:

powershell
Copy
Edit
python --version
üì¶ Installing LogicMonitor PowerShell Module
To use the LogicMonitor API via PowerShell, you‚Äôll need the Logic.Monitor module.

Open PowerShell as Administrator

Run the following command to install the module from the PowerShell Gallery:

powershell
Copy
Edit
Install-Module -Name Logic.Monitor -Scope CurrentUser -Force
If prompted about an untrusted repository, choose Y to confirm.

Once installed, verify the module:

powershell
Copy
Edit
Get-Command -Module Logic.Monitor

‚ö†Ô∏è Script Execution Policy Issues
If you encounter errors when running LogicMonitor PowerShell scripts (such as *.ps1 cannot be loaded because running scripts is disabled on this system), it‚Äôs likely due to your system‚Äôs PowerShell execution policy.

üîç What‚Äôs Happening?
PowerShell restricts script execution by default for security. The module may fail if scripts are blocked.

‚úÖ Workarounds
You can either temporarily or permanently adjust the execution policy.

üîπ Temporary (Session-Only, Recommended for Testing)
powershell
Copy
Edit
Set-ExecutionPolicy -ExecutionPolicy Bypass -Scope Process
Applies only to the current PowerShell session.

Does not affect other users or future sessions.

üî∏ Permanent (All Sessions or Current User)
powershell
Copy
Edit
# For current user
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser

# Or for all users (requires admin)
Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope LocalMachine
üí° RemoteSigned allows local scripts to run and blocks unsigned scripts from the internet.

üîê Security Note
Only change the execution policy if you trust the scripts and understand the implications. Avoid setting it to Unrestricted or Bypass permanently unless absolutely necessary.


üìÅ Next Steps
After installation:

Clone or download this repository

Ensure your JSON parameter file and CSV file are in place

Open and run the script using PowerShell:

powershell
Copy
Edit
.\build-sdt.ps1
Let me know if you'd like me to add authentication instructions for LogicMonitor or how to structure the JSON/CSV files.



This repository contains scripts for automating tasks in LogicMonitor, primarily focused on scheduling downtime (SDT) for devices. It includes:

üü¶ PowerShell scripts (ps/) that interact with the LogicMonitor API using the Logic.Monitor module.

üêç Python scripts (py/) for optional data processing or support tasks.

üóÇÔ∏è Configuration files (e.g., JSON, CSV) to customize script behavior without modifying code.

These tools are designed to streamline LogicMonitor maintenance workflows, reduce manual steps, and support reusable, parameter-driven automation.








Installing Python and logicmonitor-sdk on Windows
Step 1: Install Python on Windows
Go to the official Python download page:
https://www.python.org/downloads/windows/

Download the latest Python installer for Windows.

Important: During installation, check the box that says:
‚úÖ Add Python to PATH

Complete the installation and verify it:

Open PowerShell or Command Prompt and run:

powershell
Copy
Edit
python --version
You should see output like:

nginx
Copy
Edit
Python 3.x.x
Step 2: Install the logicmonitor-sdk Python Module
Once Python is installed, use pip to install the LogicMonitor SDK:

powershell
Copy
Edit
pip install logicmonitor-sdk==3.*
‚úÖ This installs version 3 of the official LogicMonitor SDK, which supports newer API versions.

To verify the installation:

powershell
Copy
Edit
pip show logicmonitor-sdk
You should see metadata about the installed SDK package.

Depending on the specific script you're using from the py/ folder, you may need to install additional Python modules such as pandas, requests, or others.

If a script throws an error like ModuleNotFoundError, it means that a required library isn't installed.

‚úÖ How to Install Additional Modules
The installation process is always the same using pip. For example:

powershell
Copy
Edit
pip install pandas
You can install multiple packages at once:

powershell
Copy
Edit
pip install pandas requests openpyxl
Or install everything listed in a requirements.txt file (if provided):

powershell
Copy
Edit
pip install -r requirements.txt